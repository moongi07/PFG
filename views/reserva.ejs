<div id="main-container">
  <h1>Reserva tu mesa</h1>

  <form id="reservation-form">
    <label for="datetime">Selecciona fecha y hora:</label>
    <input type="datetime-local" id="datetime" required>
    
    <label for="table-select" style="margin-top: 15px;">Elige una mesa disponible:</label>
    <select id="table-select" required>
      <option value="">-- Primero selecciona fecha y hora --</option>
    </select>
    
    <div id="error-message" class="hidden" role="alert" aria-live="assertive" aria-hidden="true">Por favor, completa todos los campos.</div>
    <div id="success-message" role="alert" aria-live="assertive" aria-hidden="true" style="color: #28a745; font-weight: bold; margin-top: 15px; display: none; text-align: center;"></div>

    <button type="submit" id="reserve-btn">Confirmar Reserva</button>
  </form>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const datetimeInput = document.getElementById('datetime');
  const tableSelect = document.getElementById('table-select');
  const form = document.getElementById('reservation-form');
  const errorMessage = document.getElementById('error-message');

    const successMessage = document.createElement('div');
    successMessage.id = 'success-message';
    successMessage.style.color = '#28a745';
    successMessage.style.fontWeight = 'bold';
    successMessage.style.marginTop = '15px';
    successMessage.style.display = 'none';
    form.appendChild(successMessage);


  // Mesas totales (puedes ajustar o traerlas desde backend si quieres)
  const allTables = ['table-1', 'table-2', 'table-3', 'table-4', 'table-5', 'table-6', 'table-7', 'table-8'];

  // Función para obtener mesas reservadas para una fecha/hora específica desde la API
  async function fetchReservedTables(fecha) {
    try {
      // La API debería recibir la fecha y devolver las mesas reservadas para ese rango
      const response = await fetch(`/api/mesas-reservadas?fecha=${encodeURIComponent(fecha)}`);
      if (!response.ok) throw new Error('Error al obtener mesas reservadas');
      const data = await response.json();
      // data = [{ mesa_id: "table-1" }, { mesa_id: "table-3" }, ...]
      return data.map(item => item.mesa_id);
    } catch (error) {
      console.error(error);
      return [];
    }
  }

  // Actualizar select de mesas disponibles según fecha/hora
  async function updateAvailableTables() {
    const fecha = datetimeInput.value;
    tableSelect.innerHTML = '';
    if (!fecha) {
      tableSelect.innerHTML = '<option value="">-- Primero selecciona fecha y hora --</option>';
      tableSelect.disabled = true;
      return;
    }

    tableSelect.disabled = true;
    tableSelect.innerHTML = '<option>Consultando disponibilidad...</option>';

    const reservedTables = await fetchReservedTables(fecha);

    const availableTables = allTables.filter(tableId => !reservedTables.includes(tableId));

    if (availableTables.length === 0) {
      tableSelect.innerHTML = '<option value="">No hay mesas disponibles para esta fecha</option>';
      tableSelect.disabled = true;
    } else {
      tableSelect.disabled = false;
      tableSelect.innerHTML = '<option value="">-- Selecciona una mesa --</option>';
      availableTables.forEach(tableId => {
        const option = document.createElement('option');
        option.value = tableId;
        option.textContent = tableId.toUpperCase().replace('TABLE-', 'Mesa ');
        tableSelect.appendChild(option);
      });
    }
  }

datetimeInput.addEventListener('input', updateAvailableTables);
form.addEventListener('submit', async (e) => {
  e.preventDefault();
  errorMessage.classList.add('hidden');
  successMessage.style.display = 'none';

  const fecha = datetimeInput.value.trim();
  const mesa = tableSelect.value;

  if (!fecha || !mesa) {
    errorMessage.textContent = 'Por favor, completa todos los campos.';
    errorMessage.classList.remove('hidden');
    return;
  }

  try {
    const response = await fetch('/reservas', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ fecha, mesa })
    });

    const result = await response.json();

    if (!response.ok) {
      // Si hay error del backend, mostrar el mensaje que envió
      errorMessage.textContent = result.error || 'Hubo un error al guardar la reserva.';
      errorMessage.classList.remove('hidden');
      return;
    }

    // Si todo bien, mostrar mensaje de éxito
    successMessage.textContent = 'Reserva confirmada. Consulte su correo donde debería haber recibido la confirmación de la misma.';
    successMessage.style.display = 'block';

    form.reset();
    tableSelect.innerHTML = '<option value="">-- Primero selecciona fecha y hora --</option>';
    tableSelect.disabled = true;

  } catch (error) {
    console.error(error);
    errorMessage.textContent = 'Hubo un problema al guardar tu reserva. Intenta de nuevo.';
    errorMessage.classList.remove('hidden');
  }
});
  // Inicialmente deshabilitar select mesas
  tableSelect.disabled = true;
});
</script>

<style>
    
  body {
  text-align: center;
  background-color: #6d4c41de;
  color: #4a2c2a;
  margin: 0;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#main-container {
  max-width: 400px;
  margin: 40px auto;
  background: #fffdf8;
  padding: 30px 25px;
  border-radius: 15px;
  box-shadow: 0 8px 20px rgba(0,0,0,0.1);
}

h1 {
  color: #5a3e36;
  margin-bottom: 30px;
}

label {
  font-weight: bold;
  color: #8c7851;
  display: block;
  margin-bottom: 8px;
  text-align: left;
}

input, select, button {
  width: 100%;
  padding: 10px;
  font-size: 1rem;
  border-radius: 8px;
  border: 1px solid #ddd;
  box-sizing: border-box;
}

input:focus, select:focus, button:focus {
  outline: 3px solid #ffb142;
  outline-offset: 2px;
  box-shadow: 0 0 5px rgba(255,177,66,0.5);
}

button {
  margin-top: 20px;
  background-color: #5cb85c;
  color: white;
  border: none;
  cursor: pointer;
  font-weight: bold;
  transition: background-color 0.3s;
}

button:hover,
button:focus {
  background-color: #4a934a;
  outline: 3px solid #ffd57f; /* foco visible con color cálido */
  outline-offset: 2px;
}

#error-message {
  color: #d9534f;
  margin-top: 10px;
  font-weight: bold;
  display: none;
}

#error-message.visible {
  display: block;
}

#success-message {
  color: #28a745;
  font-weight: bold;
  margin-top: 15px;
  display: none;
  text-align: center;
}


</style>
